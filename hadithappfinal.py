# -*- coding: utf-8 -*-
"""HadithAppFinal.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HkjX94Oh01nR9QAR1Mx9Q-6jc7q2Nw0v
"""

# app.py

import streamlit as st
import pickle
import re
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import LinearSVC
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, accuracy_score
import re
import pandas as pd
file_id = "1JMUEv4C-cIAZEY6_9q7Rl0qMQFCMWbfL"
download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
df=pd.read_csv("download_url")
df.head()
# Chargement de la data (remplace par ton propre chemin)
# df = pd.read_csv('path_to_file.csv')

# Exemple : nettoyage du texte arabe
def clean_arabic(text):
    text = re.sub(r'[^\u0600-\u06FF\s]', '', str(text))  # Supprime tout sauf caract√®res arabes
    text = re.sub(r'\d+', '', text)  # Supprime les chiffres
    text = re.sub(r'\s+', ' ', text)  # Supprime les espaces multiples
    text = text.strip()  # Enl√®ve les espaces en d√©but/fin
    return text

# Nettoyage
df['text_ar_cleaned'] = df['text_ar'].apply(clean_arabic)

# Donn√©es
X = df['text_ar_cleaned']
y = df['source']

# Split en train/test
vect=TfidfVectorizer(max_features=5000)
X=vect.fit_transform(X).toarray()
# Nettoyage du texte arabe
def clean_arabic(text):
    text = re.sub(r'[^\u0600-\u06FF\s]', '', str(text))
    text = re.sub(r'\d+', '', text)
    text = re.sub(r'\s+', ' ', text)
    return text.strip()

# Chargement du mod√®le
model = pickle.load(open('hadith_classifier.pickle','rb'))
# Interface Streamlit
st.set_page_config(page_title="Al-Hadith Source Classification", layout="centered")

st.title("üìñ Al-Hadith Source Discovery")
st.markdown("Enter al-Hadith for source Discovery (ie : Sahih Bukhari, Sahih Muslim, Jami' Al-Tirmedhi, Sunan Ibn Maja, Sunan Abi Da'ud, Sunan A'nasa'i).")

user_input = st.text_area("‚úçÔ∏è Enter the hadith :", height=200)

if st.button("üîç Source Prediction"):
    if user_input.strip() == "":
        st.warning("Please input the Hadith.")
    else:
        cleaned = clean_arabic(user_input)
        vectorize=vect.transform([cleaned])
        prediction = model.predict(vectorize)[0]
        st.success(f"‚úÖ Source : **{prediction}**")
